{"version":3,"sources":["registration.js"],"names":["Registration","require","getRegistrations","req","res","find","sort","created_at","registrations","status","json","console","error","message","postRegistration","body","firstName","lastName","phoneNumber","email","qualification","gender","location","job_title","employee_id","x","newRegistration","save","registration","toObject","deleteRegistration","id","params","findByIdAndDelete","deletedRegistration","updateRegistration","findByIdAndUpdate","updatedRegistration","updateRegistrationStatus","date","log","module","exports"],"mappings":";;;;;;;;AAAA,IAAMA,YAAY,GAAGC,OAAO,CAAC,iBAAD,CAA5B;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAEOJ,YAAY,CAACK,IAAb,GAAoBC,IAApB,CAAyB;AAAEC,YAAAA,UAAU,EAAE,CAAC;AAAf,WAAzB,CAFP;;AAAA;AAEfC,UAAAA,aAFe;AAGrBJ,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,aAArB;AAHqB;AAAA;;AAAA;AAAA;AAAA;AAKrBG,UAAAA,OAAO,CAACC,KAAR,CAAc,+BAAd;AACAR,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEG,YAAAA,OAAO,EAAE;AAAX,WAArB;;AANqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB;;AAUA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAOX,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAYjBD,GAAG,CAACY,IAZa,EAGnBC,SAHmB,aAGnBA,SAHmB,EAInBC,QAJmB,aAInBA,QAJmB,EAKnBC,WALmB,aAKnBA,WALmB,EAMnBC,KANmB,aAMnBA,KANmB,EAOnBC,aAPmB,aAOnBA,aAPmB,EAQnBC,MARmB,aAQnBA,MARmB,EASnBC,QATmB,aASnBA,QATmB,EAUnBC,SAVmB,aAUnBA,SAVmB,EAWnBC,WAXmB,aAWnBA,WAXmB,EAWPC,CAXO,aAWPA,CAXO;;AAAA,gBAcjB,CAACT,SAAD,IAAc,CAACC,QAAf,IAA2B,CAACC,WAA5B,IAA2C,CAACC,KAA5C,IAAqD,CAACC,aAAtD,IAAuE,CAACC,MAAxE,IAAkF,CAACC,QAAnF,IAA+F,CAACC,SAAhG,IAA6G,CAACC,WAd7F;AAAA;AAAA;AAAA;;AAAA,4CAeZpB,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEG,YAAAA,OAAO,EAAE;AAAX,WAArB,CAfY;;AAAA;AAiBfa,UAAAA,eAjBe,GAiBG,IAAI1B,YAAJ,CAAiB;AACvCgB,YAAAA,SAAS,EAATA,SADuC;AAEvCC,YAAAA,QAAQ,EAARA,QAFuC;AAGvCC,YAAAA,WAAW,EAAXA,WAHuC;AAIvCC,YAAAA,KAAK,EAALA,KAJuC;AAKvCC,YAAAA,aAAa,EAAbA,aALuC;AAMvCC,YAAAA,MAAM,EAANA,MANuC;AAOvCC,YAAAA,QAAQ,EAARA,QAPuC;AAQvCC,YAAAA,SAAS,EAATA,SARuC;AASvCC,YAAAA,WAAW,EAAXA,WATuC;AAUvCf,YAAAA,MAAM,EAAE;AAV+B,WAAjB,CAjBH;AAAA;AAAA,0CA8BfiB,eAAe,CAACC,IAAhB,EA9Be;;AAAA;AA+BrBvB,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBG,YAAAA,OAAO,EAAE,mCADU;AAEnBe,YAAAA,YAAY,oBAAOF,eAAe,CAACG,QAAhB,EAAP;AAAmCpB,cAAAA,MAAM,EAAE;AAA3C;AAFO,WAArB;AA/BqB;AAAA;;AAAA;AAAA;AAAA;AAoCrBE,UAAAA,OAAO,CAACC,KAAR,CAAc,6BAAd;AACAR,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEG,YAAAA,OAAO,EAAE;AAAX,WAArB;;AArCqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB;;AAyCA,IAAMiB,kBAAkB,GAAG,SAArBA,kBAAqB,CAAO3B,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACjB2B,UAAAA,EADiB,GACV5B,GAAG,CAAC6B,MADM,CACjBD,EADiB;AAAA;AAAA;AAAA,0CAGW/B,YAAY,CAACiC,iBAAb,CAA+BF,EAA/B,CAHX;;AAAA;AAGjBG,UAAAA,mBAHiB;;AAAA,cAIlBA,mBAJkB;AAAA;AAAA;AAAA;;AAAA,4CAKd9B,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEG,YAAAA,OAAO,EAAE;AAAX,WAArB,CALc;;AAAA;AAOvBT,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEG,YAAAA,OAAO,EAAE;AAAX,WAArB;AAPuB;AAAA;;AAAA;AAAA;AAAA;AASvBF,UAAAA,OAAO,CAACC,KAAR,CAAc,8BAAd;AACAR,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEG,YAAAA,OAAO,EAAE;AAAX,WAArB;;AAVuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3B;;AAeA,IAAMsB,kBAAkB,GAAG,SAArBA,kBAAqB,CAAOhC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACjB2B,UAAAA,EADiB,GACV5B,GAAG,CAAC6B,MADM,CACjBD,EADiB;AAAA;AAAA;AAAA,0CAGW/B,YAAY,CAACoC,iBAAb,CAChCL,EADgC,EAEhC5B,GAAG,CAACY,IAF4B,EAGhC;AAAE,mBAAK;AAAP,WAHgC,CAHX;;AAAA;AAGjBsB,UAAAA,mBAHiB;;AAAA,cAQlBA,mBARkB;AAAA;AAAA;AAAA;;AAAA,4CASdjC,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEE,YAAAA,KAAK,EAAE;AAAT,WAArB,CATc;;AAAA;AAWvBR,UAAAA,GAAG,CAACM,IAAJ,CAAS2B,mBAAT;AAXuB;AAAA;;AAAA;AAAA;AAAA;AAavB1B,UAAAA,OAAO,CAACC,KAAR,CAAc,8BAAd;AACAR,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEE,YAAAA,KAAK,EAAE;AAAT,WAArB;;AAduB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3B;;AAkBA,IAAM0B,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAOnC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACvB2B,UAAAA,EADuB,GAChB5B,GAAG,CAAC6B,MADY,CACvBD,EADuB;AAAA,uBAEN5B,GAAG,CAACY,IAFE,EAEvBN,MAFuB,cAEvBA,MAFuB,EAEf8B,IAFe,cAEfA,IAFe;AAAA;AAI7B5B,UAAAA,OAAO,CAAC6B,GAAR,CAAY,2BAAZ,EAAyCT,EAAzC;AAJ6B;AAAA,0CAKK/B,YAAY,CAACoC,iBAAb,CAChCL,EADgC,EAEhC;AAAEtB,YAAAA,MAAM,EAANA,MAAF;AAAU8B,YAAAA,IAAI,EAAJA;AAAV,WAFgC,EAGhC;AAAE,mBAAK;AAAP,WAHgC,CALL;;AAAA;AAKvBF,UAAAA,mBALuB;;AAAA,cAUxBA,mBAVwB;AAAA;AAAA;AAAA;;AAW3B1B,UAAAA,OAAO,CAACC,KAAR,CAAc,yCAAd;AAX2B,4CAYpBR,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEE,YAAAA,KAAK,EAAE;AAAT,WAArB,CAZoB;;AAAA;AAc7BD,UAAAA,OAAO,CAAC6B,GAAR,CAAY,uBAAZ,EAAqCH,mBAArC;AACAjC,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB2B,mBAArB;AAf6B;AAAA;;AAAA;AAAA;AAAA;AAiB7B1B,UAAAA,OAAO,CAACC,KAAR,CAAc,qCAAd;AACAR,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEE,YAAAA,KAAK,EAAE;AAAT,WAArB;;AAlB6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjC;;AAuBA6B,MAAM,CAACC,OAAP,GAAiB;AACfxC,EAAAA,gBAAgB,EAAhBA,gBADe;AAEfY,EAAAA,gBAAgB,EAAhBA,gBAFe;AAGfgB,EAAAA,kBAAkB,EAAlBA,kBAHe;AAIfK,EAAAA,kBAAkB,EAAlBA,kBAJe;AAKfG,EAAAA,wBAAwB,EAAxBA;AALe,CAAjB","sourcesContent":["const Registration = require('../models/model');\n\nconst getRegistrations = async (req, res) => {\n  try {\n    const registrations = await Registration.find().sort({ created_at: -1 });\n    res.status(200).json(registrations);\n  } catch (error) {\n    console.error('Error fetching registrations:', error);\n    res.status(500).json({ message: 'Internal Server Error' });\n  }\n};\n\nconst postRegistration = async (req, res) => {\n  try {\n    const {\n      firstName,\n      lastName,\n      phoneNumber,\n      email,\n      qualification,\n      gender,\n      location,\n      job_title,\n      employee_id,x\n    } = req.body;\n\n    if (!firstName || !lastName || !phoneNumber || !email || !qualification || !gender || !location || !job_title || !employee_id) {\n      return res.status(400).json({ message: 'All fields are required.' });\n    }\n    const newRegistration = new Registration({\n      firstName,\n      lastName,\n      phoneNumber,\n      email,\n      qualification,\n      gender,\n      location,\n      job_title,\n      employee_id,\n      status: 'Currently Working',\n    });\n\n    await newRegistration.save();\n    res.status(201).json({\n      message: 'Empolyee registration successful.',\n      registration: { ...newRegistration.toObject(), status: 'pending' },\n    });\n  } catch (error) {\n    console.error('Error registering employee:', error);\n    res.status(500).json({ message: 'Internal Server Error' });\n  }\n};\n\nconst deleteRegistration = async (req, res) => {\n  const { id } = req.params;\n  try {\n    const deletedRegistration = await Registration.findByIdAndDelete(id);\n    if (!deletedRegistration) {\n      return res.status(404).json({ message: 'Registration not found.' });\n    }\n    res.status(200).json({ message: 'Registration deleted successfully.' });\n  } catch (error) {\n    console.error('Error deleting registration:', error);\n    res.status(500).json({ message: 'Internal Server Error' });\n  }\n};\n\n\nconst updateRegistration = async (req, res) => {\n  const { id } = req.params;\n  try {\n    const updatedRegistration = await Registration.findByIdAndUpdate(\n      id,\n      req.body,\n      { new: true } \n    );\n    if (!updatedRegistration) {\n      return res.status(404).json({ error: 'Registration not found' });\n    }\n    res.json(updatedRegistration);\n  } catch (error) {\n    console.error('Error updating registration:', error);\n    res.status(500).json({ error: 'Internal Server Error' });\n  }\n};\n\nconst updateRegistrationStatus = async (req, res) => {\n  const { id } = req.params;\n  const { status, date } = req.body;\n  try {\n    console.log('Received registration_id:', id);\n    const updatedRegistration = await Registration.findByIdAndUpdate(\n      id,\n      { status, date },\n      { new: true }\n    );\n    if (!updatedRegistration) {\n      console.error('Registration not found in the database.');\n      return res.status(404).json({ error: 'Registration not found' });\n    }\n    console.log('Updated registration:', updatedRegistration);\n    res.status(200).json(updatedRegistration);\n  } catch (error) {\n    console.error(\"Error updating registration status:\", error);\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n\nmodule.exports = {\n  getRegistrations,\n  postRegistration,\n  deleteRegistration,\n  updateRegistration,\n  updateRegistrationStatus,\n};"],"file":"registration.dev.js"}