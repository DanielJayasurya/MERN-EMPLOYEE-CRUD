{"version":3,"sources":["registration.js"],"names":["Registration","require","getRegistrations","req","res","registrations","regeneratorRuntime","async","_context","prev","next","awrap","find","sort","created_at","sent","status","json","t0","console","error","message","stop","postRegistration","_req$body","firstName","lastName","phoneNumber","email","qualification","gender","location","job_title","employee_id","newRegistration","_context2","abrupt","save","registration","_objectSpread","toObject","deleteRegistration","id","_context3","findByIdAndDelete","updatedRegistration","_context4","findByIdAndUpdate","updateRegistrationStatus","_req$body2","date","_context5","params","body","log","module","exports","updateRegistration"],"mappings":"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","file":"registration.min.js","sourcesContent":["const Registration = require('../models/model');\n\nconst getRegistrations = async (req, res) => {\n  try {\n    const registrations = await Registration.find().sort({ created_at: -1 });\n    res.status(200).json(registrations);\n  } catch (error) {\n    console.error('Error fetching registrations:', error);\n    res.status(500).json({ message: 'Internal Server Error' });\n  }\n};\n\nconst postRegistration = async (req, res) => {\n  try {\n    const {\n      firstName,\n      lastName,\n      phoneNumber,\n      email,\n      qualification,\n      gender,\n      location,\n      job_title,\n      employee_id,x\n    } = req.body;\n\n    if (!firstName || !lastName || !phoneNumber || !email || !qualification || !gender || !location || !job_title || !employee_id) {\n      return res.status(400).json({ message: 'All fields are required.' });\n    }\n    const newRegistration = new Registration({\n      firstName,\n      lastName,\n      phoneNumber,\n      email,\n      qualification,\n      gender,\n      location,\n      job_title,\n      employee_id,\n      status: 'Currently Working',\n    });\n\n    await newRegistration.save();\n    res.status(201).json({\n      message: 'Empolyee registration successful.',\n      registration: { ...newRegistration.toObject(), status: 'pending' },\n    });\n  } catch (error) {\n    console.error('Error registering employee:', error);\n    res.status(500).json({ message: 'Internal Server Error' });\n  }\n};\n\nconst deleteRegistration = async (req, res) => {\n  const { id } = req.params;\n  try {\n    const deletedRegistration = await Registration.findByIdAndDelete(id);\n    if (!deletedRegistration) {\n      return res.status(404).json({ message: 'Registration not found.' });\n    }\n    res.status(200).json({ message: 'Registration deleted successfully.' });\n  } catch (error) {\n    console.error('Error deleting registration:', error);\n    res.status(500).json({ message: 'Internal Server Error' });\n  }\n};\n\n\nconst updateRegistration = async (req, res) => {\n  const { id } = req.params;\n  try {\n    const updatedRegistration = await Registration.findByIdAndUpdate(\n      id,\n      req.body,\n      { new: true } \n    );\n    if (!updatedRegistration) {\n      return res.status(404).json({ error: 'Registration not found' });\n    }\n    res.json(updatedRegistration);\n  } catch (error) {\n    console.error('Error updating registration:', error);\n    res.status(500).json({ error: 'Internal Server Error' });\n  }\n};\n\nconst updateRegistrationStatus = async (req, res) => {\n  const { id } = req.params;\n  const { status, date } = req.body;\n  try {\n    console.log('Received registration_id:', id);\n    const updatedRegistration = await Registration.findByIdAndUpdate(\n      id,\n      { status, date },\n      { new: true }\n    );\n    if (!updatedRegistration) {\n      console.error('Registration not found in the database.');\n      return res.status(404).json({ error: 'Registration not found' });\n    }\n    console.log('Updated registration:', updatedRegistration);\n    res.status(200).json(updatedRegistration);\n  } catch (error) {\n    console.error(\"Error updating registration status:\", error);\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n\nmodule.exports = {\n  getRegistrations,\n  postRegistration,\n  deleteRegistration,\n  updateRegistration,\n  updateRegistrationStatus,\n};"]}